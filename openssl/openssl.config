# OpenSSL example configuration file.
# This is mostly being used for generation of certificate requests.
# Default location: %ProgramFiles%\OpenSSL-Win64\bin\openssl.cfg
# Combine: csr.config + ca.config + tsa.config
# See https://www.phildev.net/ssl/opensslconf.html for more info

# Note that you can include other files from the main configuration
# file using the .include directive.
#.include filename

# This definition stops the following lines choking if HOME isn't
# defined.
HOME            = .

# Extra OBJECT IDENTIFIER info:
#oid_file       = $ENV::HOME/.oid
oid_section     = new_oids

# To use this configuration file with the "-extfile" option of the
# "openssl x509" utility, name here the section containing the
# X.509v3 extensions to use:
# extensions        =
# (Alternatively, use a configuration file that has only
# X.509v3 extensions in its main [= default] section.)

[ new_oids ]

# We can add new OIDs in here for use by 'ca', 'req' and 'ts'.
# Add a simple OID like this:
# testoid1=1.2.3.4
# Or use config file substitution like this:
# testoid2=${testoid1}.5.6

# Policies used by the TSA examples.
tsa_policy1 = 1.2.3.4.1
tsa_policy2 = 1.2.3.4.5.6
tsa_policy3 = 1.2.3.4.5.7

####################################################################
[ ca ]
default_ca  = CA_default            # The default ca section, overriden by -name switch

[ CA_default ]

dir         = ./CA                  # Variable declaration.
crl_dir     = $dir/crl              # Where the issued crl are kept
RANDFILE    = $dir/.rand            # This is a random file to read/write random data to/from.

certs       = $dir/certs            # Where the issued certs are kept (Mandatory)
database    = $dir/index.txt        # The text database index file to use. (Mandatory)
#unique_subject = no                # Set to 'no' to allow creation of several certs with same subject.
new_certs_dir   = $dir/newcerts     # default place for new certs. (Mandatory)

certificate = $dir/ca.crt           # The CA certificate (Mandatory)
serial      = $dir/serial           # A text file containing the next serial number to use in hex. (Mandatory)
                                    # use the -create_serial switch 
crlnumber   = $dir/crlnumber        # This is the serial number, but for CRLs
crl         = $crl_dir/ca.crl       # The current CRL.
                                    # The current crl number must be commented out to leave a V1 CRL
private_key = $dir/ca.key           # The private key (Mandatory)

x509_extensions = x509_ext          # The extensions used for adding info to signed certificate
                                    # Do override with -extensions v3_ca when using ca command to sign certificate.

# Comment out the following two lines for the "traditional" (and highly broken) format.
# These simply define the way that the name and certificate information are displayed to 
# you for "confirmation" before signing a certificate 
name_opt    = ca_default            # Subject Name options
cert_opt    = ca_default            # Certificate field options

# Should honor extensions requested by CSR
# Extension copying option: use with caution.
# copy_extensions = copy

# Extensions to add to a CRL. Note: Netscape communicator chokes on V2 CRLs
# so this is commented out by default to leave a V1 CRL.
# crlnumber must also be commented out to leave a V1 CRL.
# crl_extensions    = crl_ext

default_days    = 365               # how long the certificate is valid
default_crl_days= 30                # how long before next CRL
default_md      = sha1              # the message digest algorithm. Do not use md5.
                                    # default: md5, overriden by using the algo switch (eg. -sha1)
preserve        = no                # keep passed DN ordering. "no" means openssl will re-order 
                                    # the attributes in the DNs of CSRs to make them consistent.

# This is the default policy section to use if none is specified.
# A few difference way of specifying how similar the request should look
# For type CA, the listed attributes must be the same, and the optional
# and supplied fields are just that :-)
policy      = CA_policy

# "match" means the field value must match the same field in the CA DN.
# "supplied" means that value must be present.
# "optional" means it may be present. 
# Any fields not mentioned are silently deleted.
[ CA_policy ]
countryName             = match
stateOrProvinceName     = match
organizationName        = match
organizationalUnitName  = optional
commonName              = supplied
emailAddress            = optional

# For the 'anything' policy, using "-policy policy_anything" switch
# At this point in time, you must list all acceptable 'object' types.
[ policy_anything ]
countryName             = optional
stateOrProvinceName     = optional
localityName            = optional
organizationName        = optional
organizationalUnitName  = optional
commonName              = supplied
emailAddress            = optional

####################################################################
[ req ]
default_bits        = 2048          # default: 512, overriden by -newkey option.
default_keyfile     = localhost.key # default: key is written to standard output, overriden by -keyout
#encrypt_key        = no            # used for encrypt the private key
distinguished_name  = req_distinguished_name
attributes          = req_attributes
x509_extensions     = v3_ca         # The extensions to add to the signed cert
req_extensions      = v3_req        # specifies a list of extensions to be added, overriden by -reqexts

# Passwords for private keys if not present they will be prompted for
# input_password    = secret
# output_password   = secret

# This sets a mask for permitted string types. There are several options.
# default: PrintableString, T61String, BMPString.
# pkix   : PrintableString, BMPString (PKIX recommendation before 2004)
# utf8only: only UTF8Strings (PKIX recommendation after 2004).
# nombstr : PrintableString, T61String (no BMPStrings or UTF8Strings).
# MASK:XXXX a literal mask value.
# WARNING: ancient versions of Netscape crash on BMPStrings or UTF8Strings.
string_mask = utf8only              # default: ascii

[ req_distinguished_name ]
# The Subject DN can be formed using X501 or RFC 4514 (see RFC 4519 for a description). 
# Its sort of a mashup. For example, RFC 4514 does not provide emailAddress.
# Use '.' to leave to blank, empty string will cause it to use default values.
countryName         = [C] Country Name (2 letter code), see https://www.ssl.com/country_codes/
countryName_default = AU
countryName_min     = 2
countryName_max     = 2

stateOrProvinceName         = [ST] State or Province Name (full name)
stateOrProvinceName_default = Some-State

localityName                = [L] Locality Name (eg, city)

0.organizationName          = [O] Organization Name (eg, company)
0.organizationName_default  = Internet Widgits Pty Ltd

# we can do this but it is not needed normally :-)
#1.organizationName         = Second Organization Name (eg, company)
#1.organizationName_default = World Wide Web Pty Ltd

organizationalUnitName          = Organizational Unit Name (eg, section)
#organizationalUnitName_default =

# Use a friendly name here because it's presented to the user. The server's DNS 
# names are placed in Subject Alternate Names. Plus, DNS names here is deprecated 
# by both IETF and CA/Browser Forums. See https://cabforum.org/
# If you place a DNS name here, then you must include the DNS name in the SAN too
# (otherwise, Chrome and others that strictly follow the CA/Browser Baseline Requirements will fail).
commonName              = [CN] Common Name (e.g. *.example.com)
commonName_max          = 64

emailAddress            = Email Address
emailAddress_max        = 64

# SET-ex3               = SET extension number 3

[ req_attributes ]
# We don't want these, but the section must exist
challengePassword       = A challenge password (https://www.openssl.org/docs/man1.1.1/man1/openssl.html#Pass-Phrase-Options)
challengePassword_min   = 4
challengePassword_max   = 20
unstructuredName        = An optional company name

####################################################################
# Extensions: see https://www.phildev.net/ssl/extensions.html
[ x509_ext ]
# These extensions are added when 'ca' signs a request.

# This goes against PKIX guidelines but some CAs do it and some software
# requires this to avoid interpreting an end user certificate as a CA.

basicConstraints        = CA:FALSE

# Here are some examples of the usage of nsCertType. If it is omitted
# the certificate can be used for anything *except* object signing.
# This is OK for an SSL server.
# nsCertType            = server

# For an object signing certificate this would be used.
# nsCertType            = objsign

# For normal client use this is typical
# nsCertType            = client, email

# and for everything including object signing:
# nsCertType            = client, email, objsign

# This is typical in keyUsage for a client certificate.
# eg. client authentication?
# keyUsage = nonRepudiation, digitalSignature, keyEncipherment

# This will be displayed in Netscape's comment listbox.
nsComment               = "OpenSSL Generated Certificate"

# PKIX recommendations harmless if included in all certificates.
subjectKeyIdentifier    = hash          # The method for finding the SKI is to hash the public key.
authorityKeyIdentifier  = keyid,issuer  # Define SKI of the CA that signed us, and the issuer of the CA that signed us (keyid and issue respectively)

# This stuff is for subjectAltName and issuerAltname.
# Import the email address.
# subjectAltName        = email:copy
# An alternative to produce certificates that aren't
# deprecated according to PKIX.
# subjectAltName        = email:move
# Custom subjectAltName
subjectAltName          = @alt_names

# Copy subject details
# issuerAltName         = issuer:copy

#nsCaRevocationUrl      = http://www.domain.dom/ca-crl.pem
#nsBaseUrl
#nsRevocationUrl
#nsRenewalUrl
#nsCaPolicyUrl
#nsSslServerName

# This is required for TSA certificates.
# extendedKeyUsage      = critical,timeStamping

# CRL distribution method
# crlDistributionPoints = URI:http://www.example.com/example_ca.crl

[ v3_req ]
# Extensions to add to a certificate request
basicConstraints        = CA:FALSE
keyUsage                = nonRepudiation, digitalSignature, keyEncipherment

# An alternative to produce certificates that aren't
# deprecated according to PKIX.
# subjectAltName        = email:move
# Custom subjectAltName
subjectAltName          = @alt_names

[ v3_ca ]
# Extensions for a typical CA
# Use -extensions v3_ca on the ca command

# PKIX recommendation.
subjectKeyIdentifier    = hash
authorityKeyIdentifier  = keyid:always,issuer:always

# This is what PKIX recommends but some broken software chokes on critical
# extensions.
#basicConstraints = critical,CA:true
# So we do this instead.
basicConstraints = CA:true

# Key usage: this is typical for a CA certificate. However since it will
# prevent it being used as an test self-signed certificate it is best
# left out by default.
# keyUsage = cRLSign, keyCertSign

# Some might want this also
# nsCertType            = sslCA, emailCA

# Include email address in subject alt name: another PKIX recommendation
# subjectAltName        = email:copy
# Copy issuer details
# issuerAltName         = issuer:copy

# CRL distribution method
# crlDistributionPoints = URI:http://www.example.com/example_ca.crl

# DER hex encoding of an extension: beware experts only!
# obj                   = DER:02:03
# Where 'obj' is a standard or added object
# You can even override a supported extension:
# basicConstraints      = critical, DER:30:03:01:01:FF

[ crl_ext ]
# CRL extensions.
# Only issuerAltName and authorityKeyIdentifier make any sense in a CRL.

# issuerAltName         = issuer:copy
authorityKeyIdentifier  = keyid:always

[ proxy_cert_ext ]
# These extensions should be added when creating a proxy certificate

# This goes against PKIX guidelines but some CAs do it and some software
# requires this to avoid interpreting an end user certificate as a CA.
basicConstraints        = CA:FALSE

# Here are some examples of the usage of nsCertType. If it is omitted
# the certificate can be used for anything *except* object signing.
# This is OK for an SSL server.
# nsCertType            = server

# For an object signing certificate this would be used.
# nsCertType            = objsign

# For normal client use this is typical
# nsCertType            = client, email

# and for everything including object signing:
# nsCertType            = client, email, objsign

# This is typical in keyUsage for a client certificate.
# eg. client authentication?
# keyUsage              = nonRepudiation, digitalSignature, keyEncipherment

# This will be displayed in Netscape's comment listbox.
nsComment               = "OpenSSL Generated Certificate"

# PKIX recommendations harmless if included in all certificates.
subjectKeyIdentifier    = hash
authorityKeyIdentifier  = keyid,issuer

# This stuff is for subjectAltName and issuerAltname.
# Import the email address.
# subjectAltName        = email:copy
# An alternative to produce certificates that aren't
# deprecated according to PKIX.
# subjectAltName        = email:move
# Custom subjectAltName
subjectAltName          = @alt_names

# Copy subject details
# issuerAltName=issuer:copy

#nsCaRevocationUrl      = http://www.domain.dom/ca-crl.pem
#nsBaseUrl
#nsRevocationUrl
#nsRenewalUrl
#nsCaPolicyUrl
#nsSslServerName

# This really needs to be in place for it to be a proxy certificate.
proxyCertInfo=critical,language:id-ppl-anyLanguage,pathlen:3,policy:foo

[ alt_names ]
DNS.1 = example.com 
DNS.2 = <subdomain>.example.com 
DNS.3 = mail.example.com 
DNS.4 = ftp.example.com

# Add these if you need them. But usually you don't want them or 
# need them in production. You may need them for development. 
# DNS.5 = localhost 
# DNS.6 = localhost.localdomain 
# IP.1  = 127.0.0.1 
# IP.2  = ::1

# IPv6 localhost 
# DNS.8 = ::1

####################################################################
[ tsa ]
default_tsa             = tsa_config1       # the default TSA section

[ tsa_config1 ]
# These are used by the TSA reply generation only.
dir                     = ./CA              # TSA root directory
serial                  = $dir/tsaserial    # The current serial number (mandatory)
crypto_device           = builtin           # OpenSSL engine to use for signing
signer_cert             = $dir/tsa.crt      # The TSA signing certificate
                                            # (optional)
certs                   = $dir/ca.crt       # Certificate chain to include in reply
                                            # (optional)
signer_key              = $dir/ca.key       # The TSA private key (optional)
signer_digest           = sha256            # Signing digest to use. (Optional)
default_policy          = tsa_policy1       # Policy if request did not specify it
                                            # (optional)
other_policies          = tsa_policy2, tsa_policy3  # acceptable policies (optional)
digests                 = sha1, sha256, sha384, sha512  # Acceptable message digests (mandatory)
accuracy                = secs:1, millisecs:500, microsecs:100  # (optional)
clock_precision_digits  = 0                 # number of digits after dot. (optional)
ordering                = yes               # Is ordering defined for timestamps?
                                            # (optional, default: no)
tsa_name                = yes               # Must the TSA name be included in the reply?
                                            # (optional, default: no)
ess_cert_id_chain       = no                # Must the ESS cert id chain be included?
                                            # (optional, default: no)
ess_cert_id_alg         = sha1              # algorithm to compute certificate
                                            # identifier (optional, default: sha1)
                                            
####################################################################
